class CoverageExtension {
    boolean enabled = false
    List<String> excludePackages;
    List<String> excludeClasses;
}

project.extensions.create('coverage', CoverageExtension)

apply plugin: 'jacoco'

jacoco.toolVersion = "0.8.5"

task coverageCheck(dependsOn: test) {
    doLast {
        if (!coverage.enabled) {
            return
        }

        if (!file("$buildDir/classes/java/test").exists()) {
            throw new IllegalArgumentException("No test found")
        }

        ant.taskdef(name: 'jacocoReport',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacocoAnt.asPath)

        ant.jacocoReport {
            executiondata {
                fileset(dir: "$buildDir/jacoco") {
                    include name: 'test.exec'
                }
            }

            structure(name: project.name) {
                classfiles {
                    fileset(dir: "$buildDir/classes/java/main") {
                        coverage.excludePackages.each() {
                            exclude name: "${it.replaceAll('\\.', '/') + '/*'}"
                        }
                        coverage.excludeClasses.each() {
                            exclude name: "${it.replaceAll('\\.', '/') + '.class'}"
                        }
                    }
                }
                sourcefiles {
                    fileset dir: "src/main/java"
                }
            }

            html(destdir: "$buildDir/reports/jacoco")

            check(failOnViolation: true) {
                rule(element: 'PACKAGE') {
                    limit(counter: "LINE", value: "COVEREDRATIO", minimum: "0.1")
                    limit(counter: "CLASS", value: "COVEREDRATIO", minimum: "0.1")
                    limit(counter: "BRANCH", value: "COVEREDRATIO", minimum: "0.1")
                }
            }
        }
    }
}

check.dependsOn "coverageCheck"